openapi: 3.0.0
info:
  description: API Documentation of the webapp News4Hackers
  version: 1.0.0
  title: News4Hackers
servers:
  - url: 'https://news4hackers.herokuapp.com/api'
tags:
  - name: users
    description: Operations with users
  - name: posts
    description: Operations with posts
paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
      responses:
        '200':
          description: >-
            A JSON file with the list of existing users that exist in the
            database
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - users
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user has been created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/users/{username}':
    get:
      tags:
        - users
      summary: Get user by user name
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The user identified by username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Updates the user identified by a username
      parameters:
        - name: username
          in: path
          description: The username that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Updated user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Deletes the user identified by a username
      parameters:
        - name: username
          in: path
          description: The user name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User has been deleted
        '400':
          description: Invalid username supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /posts:
    get:
      tags:
        - posts
      summary: Returns all the existing posts in the system
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
      responses:
        '200':
          description: List of existing posts that matched the criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/UrlPost'
                    - $ref: '#/components/schemas/AskPost'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
security:
  - HeaderAuth: []
  - QueryAuth: []
components:
  securitySchemes:
    HeaderAuth:
      type: apiKey
      in: header
      name: key
    QueryAuth:
      type: apiKey
      in: query
      name: key
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
  parameters:
    indentParam:
      name: indent
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Indentation of the JSON output
    filterParam:
      name: filter
      in: query
      schema:
        type: string
      description: Query field filters separated with commas
    sortParam:
      name: sort
      in: query
      schema:
        type: string
      description: Field to sort the response
  schemas:
    User:
      type: object
      properties:
        githubId:
          type: string
        username:
          type: string
        karma:
          type: integer
        about:
          type: string
        email:
          type: string
    Post:
      type: object
      properties:
        title:
          type: string
        owner:
          $ref: '#/components/schemas/User'
    UrlPost:
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            url:
              type: string
            tld:
              type: string
    AskPost:
      allOf:
        - $ref: '#/components/schemas/Post'
        - type: object
          properties:
            text:
              type: string