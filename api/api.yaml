openapi: 3.0.0
info:
  description: API Documentation of the webapp News4Hackers
  version: 1.0.0
  title: News4Hackers
servers:
  - url: 'https://news4hackers.herokuapp.com/api'
tags:
  - name: users
    description: Operations with users
  - name: posts
    description: Operations with posts
  - name: comments
    description: Operations with comments
paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
      responses:
        '200':
          description: >-
            A JSON file with the list of existing users that exist in the
            database
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - users
      summary: Create user
      responses:
        '403':
          description: User creation via API is not allowed
  '/users/{username}':
    get:
      tags:
        - users
      summary: Get user by user name
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The user identified by username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Updates the user identified by a username
      parameters:
        - name: username
          in: path
          description: The username that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Updated user
        content:
          application/json:
            schema:
              type: object
              properties:
                about:
                  type: string
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: You are not allowed to edit this user
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Deletes the user identified by a username
      parameters:
        - name: username
          in: path
          description: The user name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User has been deleted
        '400':
          description: Invalid username supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: You are not allowed to delete this user
        '404':
          description: User not found

  '/users/{username}/comments':
    get:
      tags:
        - users
      summary: Get comments from a user by user name
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The comments made by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid username supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /posts:
    get:
      tags:
        - posts
      summary: Returns all the existing posts in the system
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
      responses:
        '200':
          description: List of existing posts that matched the criteria
          content:
            application/json:
              schema:
                type: array
                items:
                    anyOf:
                    - $ref: '#/components/schemas/UrlPost'
                    - $ref: '#/components/schemas/AskPost'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - posts
      summary: Create post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UrlPost-CreationGeneral'
                - $ref: '#/components/schemas/AskPost-CreationGeneral'
      responses:
        '201':
          description: The post has been created
        '400':
          description: Invalid data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: The existing post

  '/posts/url':
    post:
      tags:
        - posts
      summary: Create post of type URL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrlPost-Creation'
      responses:
        '201':
          description: The post has been created
        '400':
          description: Invalid data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: The existing post

  '/posts/ask':
    post:
      tags:
        - posts
      summary: Create post of type ask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskPost-Creation'
      responses:
        '201':
          description: The post has been created
        '400':
          description: Invalid data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: The existing post

  '/posts/newest':
    get:
      tags:
        - posts
      summary: Returns the latest posts in the system sorted by date
      responses:
        '200':
          description: List of latest posts that matched the criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/UrlPost'
                    - $ref: '#/components/schemas/AskPost'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/posts/popular':
    get:
      tags:
        - posts
      summary: Returns the most popular posts in the system sorted by karma
      responses:
        '200':
          description: List of popular posts that matched the criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/UrlPost'
                    - $ref: '#/components/schemas/AskPost'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/posts/{postId}':
    get:
      tags:
        - posts
      summary: Get post by post id
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
        - name: postId
          in: path
          description: The post that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The post identified by postId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostGet-Workaround'
        '400':
          description: Invalid username supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    put:
      tags:
        - posts
      summary: Updates the post identified by a id
      parameters:
        - name: postId
          in: path
          description: The post that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Updated post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate-Workaround'
      responses:
        '200':
          description: Updated post
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AskPost'
                  - $ref: '#/components/schemas/UrlPost'
        '400':
          description: Invalid post supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Post not found
    delete:
      tags:
        - posts
      summary: Deletes the post identified by the post id
      parameters:
        - name: postId
          in: path
          description: The post name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post has been deleted
        '400':
          description: Invalid postId supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Post not found
  '/posts/{postId}/like':
    post:
      tags:
        - posts
      summary: Like a post
      parameters:
        - name: postId
          in: path
          description: The post that needs to be liked
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The post has been liked
        '409':
          description: You already liked this post
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - posts
      summary: Removes the like previously set on post id
      parameters:
        - name: postId
          in: path
          description: The post whose like needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like has been deleted
        '400':
          description: Invalid postId supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Post not found

  '/posts/{postId}/comment':
    post:
      tags:
        - posts
      summary: Create comment
      parameters:
        - name: postId
          in: path
          description: The post who owns the
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment-Creation'
      responses:
        '200':
          description: The comment has been created
        '400':
          description: Invalid data
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /comments:
    get:
      tags:
        - comments
      summary: List all comments
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
      responses:
        '200':
          description: >-
            A JSON file with the list of existing comments that exist in the
            database
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/Comment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/comments/{commentId}':
    get:
      tags:
        - comments
      summary: Get comment by comment id
      parameters:
        - $ref: '#/components/parameters/indentParam'
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
        - name: commentId
          in: path
          description: The comment that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The comment identified by commentId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid comment id supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Comment not found
    put:
      tags:
        - comments
      summary: Updates a comment identified by a id
      parameters:
        - name: commentId
          in: path
          description: The comment that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Updated comment
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: Updated comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment-Update'
        '400':
          description: Invalid comment supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Comment not found
    delete:
      tags:
        - comments
      summary: Deletes the comment identified by the comment id
      parameters:
        - name: commentId
          in: path
          description: The comment to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment has been deleted
        '400':
          description: Invalid comment id supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Comment not found
  '/comments/{commentId}/like':
    post:
      tags:
        - comments
      summary: Like a comment
      parameters:
        - name: commentId
          in: path
          description: The comment that needs to be liked
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The comment has been liked
        '409':
          description: You already liked this comment
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - comments
      summary: Removes the like previously set on comment id
      parameters:
        - name: commentId
          in: path
          description: The comment whose like needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like has been deleted
        '400':
          description: Invalid commentId supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Comment not found
security:
  - HeaderAuth: []
  - QueryAuth: []
components:
  securitySchemes:
    HeaderAuth:
      type: apiKey
      in: header
      name: X-API-Key
    QueryAuth:
      type: apiKey
      in: query
      name: api_key
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
  parameters:
    indentParam:
      name: indent
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Indentation of the JSON output
    filterParam:
      name: filter
      in: query
      schema:
        type: string
      description: Query field filters separated with commas
    sortParam:
      name: sort
      in: query
      schema:
        type: string
      description: Field to sort the response
    orderParam:
      name: order
      in: query
      schema:
        type: string
        enum: ["asc", "desc"]
      description: Ascending or descending order of sort
  schemas:
    User:
      type: object
      properties:
        karma:
          type: integer
        about:
          type: string
        email:
          type: string
        date:
          type: string
        _id:
          type: string
        username:
          type: string
        githubId:
          type: string
    User-Creation:
      type: object
      required:
        - username
        - githubId
      properties:
        about:
          type: string
        username:
          type: string
        githubId:
          type: string
    Owner:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
    Post:
      type: object
      properties:
        totalComments:
          type: integer
        totalLikes:
          type: integer
        date:
          type: string
        _id:
          type: string
        title:
          type: string
    UrlPost:
      allOf:
        - $ref: '#/components/schemas/Post'
      type: object
      properties:
        __type:
          type: string
          enum: ["Url"]
        url:
          type: string
        owner:
          $ref: '#/components/schemas/Owner'
        tld:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    UrlPost-Creation:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
    UrlPost-CreationGeneral:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
          default: "url"
        url:
          type: string
    UrlPost-Update:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
    AskPost:
      allOf:
        - $ref: '#/components/schemas/Post'
      type: object
      properties:
        __type:
          type: string
          enum: ["Ask"]
        text:
          type: string
        owner:
          $ref: '#/components/schemas/Owner'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    AskPost-Creation:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
    AskPost-Update:
      type: object
      properties:
        title:
          type: string
        text:
          type: string

    AskPost-CreationGeneral:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
          default: "ask"
        text:
          type: string

    PostGet-Workaround:
      type: object
      oneOf:
        - $ref: '#/components/schemas/UrlPost'
        - $ref: '#/components/schemas/AskPost'
    PostUpdate-Workaround:
      type: object
      oneOf:
        - $ref: '#/components/schemas/AskPost-Update'
        - $ref: '#/components/schemas/UrlPost-Update'
    Comment:
      type: object
      required:
        - deleted
        - totalLikes
        - date
        - _id
        - comment
        - owner
        - post
        - replies
      properties:
        deleted:
          type: boolean
        totalLikes:
          type: integer
        date:
          type: string
        _id:
          type: string
        comment:
          type: string
        owner:
          $ref: '#/components/schemas/Owner'
        post:
          type: string
        parentComment:
          type: string
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Comment-Creation:
      type: object
      required:
        - comment
      properties:
        comment:
          type: string
        parentComment:
          type: string
    Comment-Update:
      type: object
      properties:
        comment:
          type: string